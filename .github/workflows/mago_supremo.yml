# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ 🧙 mago_supremo.yml – Solicita prompt, cria .dart, acompanha fluxo        ┃
# ┃ 📍 Roda na MAIN | Sem detectar .dart inicial | Sem shell | API apenas     ┃
# ┃ 🔮 byThyrrel | Jobs com NOME do artefato | Clicáveis para invocação       ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

name: Mago Supremo

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Cole o conteúdo do ritual (será o .dart)'
        required: true
        type: string
      destino:
        description: 'Dimensão final (Instrumentos, GRIMORIO, ExtraPlanares)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  solicitar_e_criar:
    name: Solicitar e criar artefato
    runs-on: ubuntu-latest
    outputs:
      nome: ${{ steps.criar.outputs.nome }}
    steps:
      - name: Criar .dart na Tutor-Demoníaco/rituais/ via API
        id: criar
        uses: actions/github-script@v7
        with:
          script: |
            const prompt = `${{ inputs.prompt }}`;
            const destino = '${{ inputs.destino }}';
            const nome    = 'ritual_' + Math.random().toString(36).slice(2);
            const code    = `// Ritual: ${nome}\n${prompt}\nvoid main() => print("${nome} invocado -> ${destino}");`;
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: `Tutor-Demoníaco/rituais/${nome}.dart`,
              message: `Mago: ritual ${nome} criado para ${destino}`,
              content: Buffer.from(code).toString('base64'),
              branch: 'Tutor-Demoníaco'
            });
            core.setOutput('nome', nome);

  acompanhar_fluxo:
    name: Acompanhar fluxo do artefato
    needs: solicitar_e_criar
    runs-on: ubuntu-latest
    outputs:
      aprovado: ${{ steps.teste.outputs.aprovado }}
    steps:
      - name: Aguardar chegada em /rituais/ (poll)
        uses: actions/github-script@v7
        with:
          script: |
            const nome = '${{ needs.solicitar_e_criar.outputs.nome }}';
            let tentativas = 0;
            while (tentativas < 30) {
              try {
                await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: `Tutor-Demoníaco/rituais/${nome}.dart`,
                  ref: 'main'
                });
                core.info(`✅ ${nome} chegou em /rituais/`);
                break;
              } catch (e) {
                core.info(`⏳ Aguardando ${nome} em /rituais/...`);
                await new Promise(r => setTimeout(r, 10000));
                tentativas++;
              }
            }
            if (tentativas === 30) core.setFailed(`❌ ${nome} não chegou em /rituais/`);

      - name: Mover cópia para LIMBO/lib/limbo/
        uses: actions/github-script@v7
        with:
          script: |
            const nome = '${{ needs.solicitar_e_criar.outputs.nome }}';
            const { data: original } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: `Tutor-Demoníaco/rituais/${nome}.dart`,
              ref: 'main'
            });
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: `lib/limbo/${nome}.dart`,
              message: `Mago: ${nome} movido para LIMBO`,
              content: original.content,
              branch: 'LIMBO'
            });

      - name: Simular teste (sempre aprova)
        id: teste
        run: echo "✅ Teste simulado aprovado"

  listar_dimensoes:
    name: Listar dimensões finais
    needs: acompanhar_fluxo
    runs-on: ubuntu-latest
    outputs:
      instrumentos: ${{ steps.listas.outputs.instrumentos }}
      grimorio: ${{ steps.listas.outputs.grimorio }}
      extraplanares: ${{ steps.listas.outputs.extraplanares }}
    steps:
      - name: Listar .dart por dimensão
        id: listas
        uses: actions/github-script@v7
        with:
          script: |
            async function listDim(path, output) {
              try {
                const { data } = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: path,
                  ref: 'main'
                });
                const darts = Array.isArray(data) ? data.filter(f => f.name.endsWith('.dart')).map(f => f.name.replace('.dart', '')) : [];
                core.setOutput(output, JSON.stringify(darts));
              } catch (e) {
                core.setOutput(output, JSON.stringify([]));
              }
            }
            await listDim('Instrumentos-Magicos/instrumentos', 'instrumentos');
            await listDim('GRIMORIO/rituais', 'grimorio');
            await listDim('ExtraPlanares/extraplanar', 'extraplanares');

  invocar_instrumentos:
    name: Instrumentos-Mágicos
    needs: listar_dimensoes
    runs-on: ubuntu-latest
    if: fromJson(needs.listar_dimensoes.outputs.instrumentos)[0]
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.listar_dimensoes.outputs.instrumentos) }}
    steps:
      - name: Invocar ${{ matrix.artefato }}
        run: echo "🔔 Artefato '${{ matrix.artefato }}' pronto para invocação"

  invocar_grimorio:
    name: GRIMORIO
    needs: listar_dimensoes
    runs-on: ubuntu-latest
    if: fromJson(needs.listar_dimensoes.outputs.grimorio)[0]
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.listar_dimensoes.outputs.grimorio) }}
    steps:
      - name: Invocar ${{ matrix.artefato }}
        run: echo "🔔 Artefato '${{ matrix.artefato }}' pronto para invocação"

  invocar_extraplanares:
    name: ExtraPlanares
    needs: listar_dimensoes
    runs-on: ubuntu-latest
    if: fromJson(needs.listar_dimensoes.outputs.extraplanares)[0]
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.listar_dimensoes.outputs.extraplanares) }}
    steps:
      - name: Invocar ${{ matrix.artefato }}
        run: echo "🔔 Artefato '${{ matrix.artefato }}' pronto para invocação"
