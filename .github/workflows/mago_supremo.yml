# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ 🧙 mago_supremo.yml – Cria ritual .txt na branch Tutor-Demoníaco via API   ┃
# ┃ 📍 Roda na main | Sem push bloqueado | Sem erros de sintaxe               ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
name: Mago Supremo

on:
  workflow_dispatch:
    inputs:
      nome:
        description: 'Nome do ritual'
        required: true
        type: string
      destino:
        description: 'Destino dimensional'
        required: true
        type: string

permissions:
  contents: write

jobs:
  criar_ritual:
    name: Criar ritual na Tutor-Demoníaco
    runs-on: ubuntu-latest
    outputs:
      nome: ${{ steps.criar.outputs.nome }}
    steps:
      - name: Criar arquivo na branch Tutor-Demoníaco via API
        id: criar
        uses: actions/github-script@v7
        with:
          script: |
            const nome    = '${{ inputs.nome }}';
            const destino = '${{ inputs.destino }}';
            const content = `nome: ${nome}\ndestino: ${destino}\n`;
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: `Tutor-Demoníaco/recipes/${nome}.txt`,
              message: `DrEstranho: ritual '${nome}' criado para '${destino}'`,
              content: Buffer.from(content).toString('base64'),
              branch: 'Tutor-Demoníaco'
            });
            core.setOutput('nome', nome);

  acompanhar_fluxo:
    name: Acompanhar fluxo do ritual
    runs-on: ubuntu-latest
    needs: criar_ritual
    steps:
      - name: Checkout main (apenas para leitura)
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Verificar presenca em rituais
        uses: actions/github-script@v7
        with:
          script: |
            const nome = '${{ needs.criar_ritual.outputs.nome }}';
            try {
              await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: `Tutor-Demoníaco/rituais/${nome}.dart`,
                ref: 'main'
              });
              core.info(`✅ Ritual ${nome} encontrado em /rituais/`);
            } catch (e) {
              core.setFailed(`❌ Ritual ${nome} não encontrado em /rituais/`);
            }

      - name: Verificar cópia em LIMBO
        uses: actions/github-script@v7
        with:
          script: |
            const nome = '${{ needs.criar_ritual.outputs.nome }}';
            try {
              await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: `lib/limbo/${nome}.dart`,
                ref: 'main'
              });
              core.info(`✅ Artefato ${nome} em teste na dimensão LIMBO`);
            } catch (e) {
              core.setFailed(`❌ Artefato ${nome} não chegou em LIMBO`);
            }

  testar_em_limbo:
    name: Testar artefato em LIMBO
    runs-on: ubuntu-latest
    needs: acompanhar_fluxo
    steps:
      - name: Simular testes dimensionais
        run: |
          echo "🧪 Testando artefato ${{ needs.criar_ritual.outputs.nome }}..."
          sleep 2
          echo "✅ Teste simulado aprovado"

  verificar_destinos:
    name: Verificar selamento final
    runs-on: ubuntu-latest
    needs: testar_em_limbo
    outputs:
      instrumentos: ${{ steps.instrumentos.outputs.lista }}
      grimorio: ${{ steps.grimorio.outputs.lista }}
      extraplanares: ${{ steps.extraplanares.outputs.lista }}
    steps:
      - name: Listar artefatos por dimensão
        id: listas
        uses: actions/github-script@v7
        with:
          script: |
            async function listDimension(path, output) {
              try {
                const { data } = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: path,
                  ref: 'main'
                });
                const files = Array.isArray(data) ? data.filter(f => f.name.endsWith('.dart')).map(f => f.name.replace('.dart', '')) : [];
                core.setOutput(output, JSON.stringify(files));
              } catch (e) {
                core.setOutput(output, JSON.stringify([]));
              }
            }
            await listDimension('Instrumentos-Magicos/instrumentos', 'instrumentos');
            await listDimension('GRIMORIO/rituais', 'grimorio');
            await listDimension('ExtraPlanares/extraplanar', 'extraplanares');

      - name: Exportar listas
        id: export
        run: |
          echo "instrumentos=${{ steps.listas.outputs.instrumentos }}" >> $GITHUB_OUTPUT
          echo "grimorio=${{ steps.listas.outputs.grimorio }}" >> $GITHUB_OUTPUT
          echo "extraplanares=${{ steps.listas.outputs.extraplanares }}" >> $GITHUB_OUTPUT

  invocar_instrumentos:
    name: Invocar Instrumentos
    runs-on: ubuntu-latest
    needs: verificar_destinos
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.verificar_destinos.outputs.instrumentos) }}
    steps:
      - name: Invocar artefato
        run: echo "🔔 Artefato '${{ matrix.artefato }}' invocado da dimensao Instrumentos-Magicos"

  invocar_grimorio:
    name: Invocar GRIMORIO
    runs-on: ubuntu-latest
    needs: verificar_destinos
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.verificar_destinos.outputs.grimorio) }}
    steps:
      - name: Invocar artefato
        run: echo "🔔 Artefato '${{ matrix.artefato }}' invocado da dimensao GRIMORIO"

  invocar_extraplanares:
    name: Invocar ExtraPlanares
    runs-on: ubuntu-latest
    needs: verificar_destinos
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.verificar_destinos.outputs.extraplanares) }}
    steps:
      - name: Invocar artefato
        run: echo "🔔 Artefato '${{ matrix.artefato }}' invocado da dimensao ExtraPlanares"
