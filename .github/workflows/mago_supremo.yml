# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ 🧙 mago_supremo.yml – Orquestra o ciclo completo dos rituais              ┃
# ┃ 📍 Executado na branch main                                                ┃
# ┃ 🔮 byThyrrel | Sem jq | Sem aspas curvas | Sem falhas                      ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
name: Mago Supremo

on:
  workflow_dispatch:
    inputs:
      nome:
        description: 'Nome do ritual'
        required: true
        type: string
      destino:
        description: 'Destino dimensional'
        required: true
        type: string

permissions:
  contents: write

jobs:
  criar_ritual:
    name: Criar ritual inicial
    runs-on: ubuntu-latest
    outputs:
      nome: ${{ steps.definir.outputs.nome }}
    steps:
      - name: Checkout do Grimorio
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Criar arquivo ritualistico
        id: definir
        run: |
          mkdir -p Tutor-Demoníaco/recipes
          echo "nome: ${{ inputs.nome }}" > Tutor-Demoníaco/recipes/${{ inputs.nome }}.txt
          echo "destino: ${{ inputs.destino }}" >> Tutor-Demoníaco/recipes/${{ inputs.nome }}.txt
          echo "nome=${{ inputs.nome }}" >> $GITHUB_OUTPUT

      - name: Comitar ritual criado
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "DrEstranho: ritual '${{ inputs.nome }}' criado para '${{ inputs.destino }}'"
          branch: main
          file_pattern: Tutor-Demoníaco/recipes/${{ inputs.nome }}.txt

  acompanhar_fluxo:
    name: Acompanhar fluxo do ritual
    runs-on: ubuntu-latest
    needs: criar_ritual
    steps:
      - name: Checkout do Grimorio
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Verificar presenca em rituais
        run: |
          if [ -f Tutor-Demoníaco/rituais/${{ needs.criar_ritual.outputs.nome }}.dart ]; then
            echo "✅ Ritual encontrado em /rituais/"
          else
            echo "❌ Ritual nao encontrado em /rituais/"
            exit 1
          fi

      - name: Verificar copia em LIMBO
        run: |
          if [ -f lib/limbo/${{ needs.criar_ritual.outputs.nome }}.dart ]; then
            echo "✅ Artefato em teste na dimensao LIMBO"
          else
            echo "❌ Artefato nao chegou em LIMBO"
            exit 1
          fi

  testar_em_limbo:
    name: Testar artefato em LIMBO
    runs-on: ubuntu-latest
    needs: acompanhar_fluxo
    steps:
      - name: Checkout do Grimorio
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Simular testes dimensionais
        run: |
          echo "🧪 Testando artefato ${{ needs.criar_ritual.outputs.nome }}..."
          sleep 2
          echo "✅ Teste simulado aprovado"

  verificar_destinos:
    name: Verificar selamento final
    runs-on: ubuntu-latest
    needs: testar_em_limbo
    outputs:
      instrumentos: ${{ steps.instrumentos.outputs.lista }}
      grimorio: ${{ steps.grimorio.outputs.lista }}
      extraplanares: ${{ steps.extraplanares.outputs.lista }}
    steps:
      - name: Checkout do Grimorio
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Instrumentos-Magicos
        id: instrumentos
        run: |
          mkdir -p Instrumentos-Magicos/instrumentos
          printf '[' > inst.json
          first=1
          for f in Instrumentos-Magicos/instrumentos/*.dart; do
            [ -e "$f" ] || continue
            name=$(basename "$f" .dart)
            [ $first -eq 0 ] && printf ',' >> inst.json
            printf '"%s"' "$name" >> inst.json
            first=0
          done
          printf ']' >> inst.json
          echo "lista=$(cat inst.json)" >> $GITHUB_OUTPUT

      - name: GRIMORIO
        id: grimorio
        run: |
          mkdir -p GRIMORIO/rituais
          printf '[' > grim.json
          first=1
          for f in GRIMORIO/rituais/*.dart; do
            [ -e "$f" ] || continue
            name=$(basename "$f" .dart)
            [ $first -eq 0 ] && printf ',' >> grim.json
            printf '"%s"' "$name" >> grim.json
            first=0
          done
          printf ']' >> grim.json
          echo "lista=$(cat grim.json)" >> $GITHUB_OUTPUT

      - name: ExtraPlanares
        id: extraplanares
        run: |
          mkdir -p ExtraPlanares/extraplanar
          printf '[' > ext.json
          first=1
          for f in ExtraPlanares/extraplanar/*.dart; do
            [ -e "$f" ] || continue
            name=$(basename "$f" .dart)
            [ $first -eq 0 ] && printf ',' >> ext.json
            printf '"%s"' "$name" >> ext.json
            first=0
          done
          printf ']' >> ext.json
          echo "lista=$(cat ext.json)" >> $GITHUB_OUTPUT

  invocar_instrumentos:
    name: Invocar Instrumentos
    runs-on: ubuntu-latest
    needs: verificar_destinos
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.verificar_destinos.outputs.instrumentos) }}
    steps:
      - name: Invocar artefato
        run: echo "🔔 Artefato '${{ matrix.artefato }}' invocado da dimensao Instrumentos-Magicos"

  invocar_grimorio:
    name: Invocar GRIMORIO
    runs-on: ubuntu-latest
    needs: verificar_destinos
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.verificar_destinos.outputs.grimorio) }}
    steps:
      - name: Invocar artefato
        run: echo "🔔 Artefato '${{ matrix.artefato }}' invocado da dimensao GRIMORIO"

  invocar_extraplanares:
    name: Invocar ExtraPlanares
    runs-on: ubuntu-latest
    needs: verificar_destinos
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.verificar_destinos.outputs.extraplanares) }}
    steps:
      - name: Invocar artefato
        run: echo "🔔 Artefato '${{ matrix.artefato }}' invocado da dimensao ExtraPlanares"
