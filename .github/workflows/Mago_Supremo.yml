# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ 🧙 mago_supremo.yml - Ritual supremo de invocação e distribuição de artefatos ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

name: Mago Supremo

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: "Cole aqui o prompt para o ritual"
        required: true
        default: "Escreva seu prompt"
  push:
    branches:
      - main
    paths:
      - 'Tutor-Demoníaco/rituais/*.dart'
      - '.github/workflows/mago_supremo.yml'

permissions:
  contents: write

jobs:
  detectar_chegada:
    name: Detectar chegada de .dart
    runs-on: ubuntu-latest
    outputs:
      artefatos: ${{ steps.detect.outputs.artefatos }}
    steps:
      - name: Listar .dart que chegou
        id: detect
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'Tutor-Demoníaco/rituais',
              ref: 'main'
            });
            const darts = Array.isArray(data)
              ? data.filter(f => f.name.endsWith('.dart')).map(f => f.name.replace('.dart', ''))
              : [];
            core.setOutput('artefatos', JSON.stringify(darts));

  mover_para_limbo:
    name: Mover para LIMBO
    needs: detectar_chegada
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.detectar_chegada.outputs.artefatos)[0] }}
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.detectar_chegada.outputs.artefatos) }}
    steps:
      - name: Mover cópia para LIMBO/lib/limbo/
        uses: actions/github-script@v7
        with:
          script: |
            const nome = '${{ matrix.artefato }}';
            const { data: original } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: `Tutor-Demoníaco/rituais/${nome}.dart`,
              ref: 'main'
            });
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: `lib/limbo/${nome}.dart`,
              message: `🔮 Mago: ${nome} movido para LIMBO`,
              content: original.content,
              branch: 'LIMBO'
            });

  testar_limbo:
    name: Testar em LIMBO
    needs: mover_para_limbo
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.detectar_chegada.outputs.artefatos) }}
    steps:
      - name: Simular teste (sempre aprova)
        run: echo "✅ Teste simulado aprovado para ${{ matrix.artefato }}"

  listar_dimensoes:
    name: Listar dimensões finais
    needs: testar_limbo
    runs-on: ubuntu-latest
    outputs:
      instrumentos: ${{ steps.listas.outputs.instrumentos }}
      grimorio: ${{ steps.listas.outputs.grimorio }}
      extraplanares: ${{ steps.listas.outputs.extraplanares }}
    steps:
      - name: Listar .dart por dimensão
        id: listas
        uses: actions/github-script@v7
        with:
          script: |
            async function listDim(path, output) {
              try {
                const { data } = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: path,
                  ref: 'main'
                });
                const darts = Array.isArray(data)
                  ? data.filter(f => f.name.endsWith('.dart')).map(f => f.name.replace('.dart', ''))
                  : [];
                core.setOutput(output, JSON.stringify(darts));
              } catch (e) {
                core.setOutput(output, JSON.stringify([]));
              }
            }
            await listDim('Instrumentos-Magicos/instrumentos', 'instrumentos');
            await listDim('GRIMORIO/rituais', 'grimorio');
            await listDim('ExtraPlanares/extraplanar', 'extraplanares');

  invocar_instrumentos:
    name: Instrumentos-Mágicos
    needs: listar_dimensoes
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.listar_dimensoes.outputs.instrumentos)[0] }}
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.listar_dimensoes.outputs.instrumentos) }}
    steps:
      - name: Invocar ${{ matrix.artefato }}
        run: echo "🔔 Artefato '${{ matrix.artefato }}' pronto para invocação"

  invocar_grimorio:
    name: GRIMORIO
    needs: listar_dimensoes
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.listar_dimensoes.outputs.grimorio)[0] }}
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.listar_dimensoes.outputs.grimorio) }}
    steps:
      - name: Invocar ${{ matrix.artefato }}
        run: echo "🔔 Artefato '${{ matrix.artefato }}' pronto para invocação"

  invocar_extraplanares:
    name: ExtraPlanares
    needs: listar_dimensoes
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.listar_dimensoes.outputs.extraplanares)[0] }}
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.listar_dimensoes.outputs.extraplanares) }}
    steps:
      - name: Invocar ${{ matrix.artefato }}
        run: echo "🔔 Artefato '${{ matrix.artefato }}' pronto para invocação"

# Sugestões
# - 🧪 Adicionar testes reais em vez de simulação
# - 📦 Criar job para promover artefatos para produção
# - 🔤 Integrar com sistema de aprovação manual via PR
# - 🧩 Gerar README dinâmico com artefatos invocados
# - 🎨 Criar badges visuais para cada dimensão

# ✍️ byThyrrel  
# 💡 Workflow formatado com estilo técnico, seguro e elegante  
# 🧪 Ideal para conjuradores de código com foco em automação limpa e confiável
