# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ 🧙 mago_supremo.yml - Ritual de invocação via bin/*.dart                   ┃
# ┃ 📍 Puxa artefato de bin/ | Observa Tutor-Demoniaco | Testa em LIMBO       ┃
# ┃ 🔮 byThyrrel | GitHub Web | Estilo dimensional puro                       ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

name: Mago Supremo

on:
  workflow_dispatch:
    inputs:
      invocacao:
        description: "🪄 Nome do artefato (sem .dart)"
        required: true
        type: string

permissions:
  contents: write

jobs:
  ler_bin:
    name: "📥 Ler bin/${{ github.event.inputs.invocacao }}.dart"
    runs-on: ubuntu-latest
    outputs:
      nome: ${{ steps.extrair.outputs.nome }}
      prompt: ${{ steps.extrair.outputs.prompt }}
    steps:
      - name: 🔍 Extrair conteúdo do bin/
        id: extrair
        uses: actions/github-script@v7
        with:
          script: |
            const nome = '${{ github.event.inputs.invocacao }}';
            const path = `bin/${nome}.dart`;
            const { data } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path,
              ref: 'main'
            });
            const prompt = Buffer.from(data.content, 'base64').toString();
            core.setOutput('nome', nome);
            core.setOutput('prompt', prompt);

  criar_txt:
    name: "📜 Criar recipes/${{ needs.ler_bin.outputs.nome }}.txt"
    runs-on: ubuntu-latest
    needs: ler_bin
    steps:
      - name: ✍️ Criar .txt na branch Tutor-Demoniaco
        uses: actions/github-script@v7
        with:
          script: |
            const nome = '${{ needs.ler_bin.outputs.nome }}';
            const prompt = `${{ needs.ler_bin.outputs.prompt }}`;
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: `recipes/${nome}.txt`,
              message: `📜 Recipe criada para ${nome}`,
              content: Buffer.from(prompt).toString('base64'),
              branch: 'Tutor-Demoniaco'
            });

  criar_dart:
    name: "✨ Criar rituais/${{ needs.ler_bin.outputs.nome }}.dart"
    runs-on: ubuntu-latest
    needs: criar_txt
    steps:
      - name: 🧪 Criar .dart na branch Tutor-Demoniaco
        uses: actions/github-script@v7
        with:
          script: |
            const nome = '${{ needs.ler_bin.outputs.nome }}';
            const prompt = `${{ needs.ler_bin.outputs.prompt }}`;
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: `rituais/${nome}.dart`,
              message: `✨ Ritual criado: ${nome}.dart`,
              content: Buffer.from(prompt).toString('base64'),
              branch: 'Tutor-Demoniaco'
            });

  mover_limbo:
    name: "📦 Mover para LIMBO"
    runs-on: ubuntu-latest
    needs: criar_dart
    steps:
      - name: 🚪 Copiar para lib/limbo/ na branch LIMBO
        uses: actions/github-script@v7
        with:
          script: |
            const nome = '${{ needs.ler_bin.outputs.nome }}';
            const { data: original } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: `rituais/${nome}.dart`,
              ref: 'Tutor-Demoniaco'
            });
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: `lib/limbo/${nome}.dart`,
              message: `🌌 Artefato ${nome} movido para LIMBO`,
              content: original.content,
              branch: 'LIMBO'
            });

  testar_limbo:
    name: "✏️ Testar LIMBO"
    runs-on: ubuntu-latest
    needs: mover_limbo
    outputs:
      aprovado: ${{ steps.teste.outputs.aprovado }}
    steps:
      - id: teste
        run: |
          nome="${{ needs.ler_bin.outputs.nome }}"
          if [[ "$nome" == "falha" ]]; then
            echo "aprovado=false" >> $GITHUB_OUTPUT
            echo "::error::❌ Falha na invocação: artefato não aprovado"
            exit 1
          else
            echo "aprovado=true" >> $GITHUB_OUTPUT
            echo "✅ Artefato em LIMBO aprovado"
          fi

  listar_dimensoes:
    name: "🌌 Listar dimensões"
    runs-on: ubuntu-latest
    needs: testar_limbo
    if: needs.testar_limbo.outputs.aprovado == 'true'
    outputs:
      instrumentos: ${{ steps.list.outputs.instrumentos }}
      grimorio: ${{ steps.list.outputs.grimorio }}
      extraplanares: ${{ steps.list.outputs.extraplanares }}
    steps:
      - id: list
        uses: actions/github-script@v7
        with:
          script: |
            async function listDim(path) {
              try {
                const { data } = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path,
                  ref: 'main'
                });
                return Array.isArray(data) ? data.filter(f => f.name.endsWith('.dart')).map(f => f.name.replace('.dart','')) : [];
              } catch {
                return [];
              }
            }

            core.setOutput('instrumentos', JSON.stringify(await listDim('Instrumentos-Magicos/instrumentos')));
            core.setOutput('grimorio', JSON.stringify(await listDim('GRIMORIO/rituais')));
            core.setOutput('extraplanares', JSON.stringify(await listDim('ExtraPlanares/extraplanar')));

  instrumentos:
    name: "🎶 Instrumentos-Magicos"
    runs-on: ubuntu-latest
    needs: listar_dimensoes
    if: ${{ fromJson(needs.listar_dimensoes.outputs.instrumentos) != '[]' }}
    strategy:
      matrix:
        artefato: ${{ fromJson(needs.listar_dimensoes.outputs.instrumentos) }}
    steps:
      - run: echo "🎵 Artefato '${{ matrix.artefato }}' pronto para invocação"

  grimorio:
    name: "📖 GRIMORIO"
    runs-on: ubuntu-latest
    needs: listar_dimensoes
    if: ${{ fromJson(needs.listar_dimensoes.outputs.grimorio) != '[]' }}
    strategy:
      matrix:
        artefato: ${{ fromJson(needs.listar_dimensoes.outputs.grimorio) }}
    steps:
      - run: echo "📜 Artefato '${{ matrix.artefato }}' pronto para invocação"

  extraplanares:
    name: "🪐 ExtraPlanares"
    runs-on: ubuntu-latest
    needs: listar_dimensoes
    if: ${{ fromJson(needs.listar_dimensoes.outputs.extraplanares) != '[]' }}
    strategy:
      matrix:
        artefato: ${{ fromJson(needs.listar_dimensoes.outputs.extraplanares) }}
    steps:
      - run: echo "🌌 Artefato '${{ matrix.artefato }}' pronto para invocação"
