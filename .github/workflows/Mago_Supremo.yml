# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ 🧙 mago_supremo.yml – Ritual completo                                      ┃
# ┃ 🔮 Entrada → recipes → rituais → LIMBO → Teste → Dimensões finais          ┃
# ┃ 📍 Tutor-Demoníaco | LIMBO | Instrumentos-Mágicos | GRIMORIO | ExtraPlanares ┃
# ┃ byThyrrel                                                                  ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
name: Mago Supremo

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: "Cole o prompt para gerar o artefato"
        required: true
        default: "NomeDoArtefato"

permissions:
  contents: write

jobs:
  inicio:
    name: ✨ Início do Ritual
    runs-on: ubuntu-latest
    outputs:
      artefato: ${{ steps.define.outputs.artefato }}
    steps:
      - name: Definir nome do artefato
        id: define
        run: |
          nome="${{ github.event.inputs.prompt }}"
          echo "artefato=$nome" >> $GITHUB_OUTPUT

      - name: Criar recipe .txt em Tutor-Demoníaco
        uses: actions/github-script@v7
        with:
          script: |
            const nome = process.env.artefato;
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: `recipes/${nome}.txt`,
              message: `📜 Recipe criada para ${nome}`,
              content: Buffer.from(`Prompt para ${nome}`).toString('base64'),
              branch: 'Tutor-Demoníaco'
            });

      - name: Criar ritual .dart em Tutor-Demoníaco/rituais
        uses: actions/github-script@v7
        with:
          script: |
            const nome = process.env.artefato;
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: `Tutor-Demoníaco/rituais/${nome}.dart`,
              message: `✨ Ritual criado: ${nome}.dart`,
              content: Buffer.from(`// Ritual gerado para ${nome}`).toString('base64'),
              branch: 'Tutor-Demoníaco'
            });
        env:
          artefato: ${{ steps.define.outputs.artefato }}

  mover_limbo:
    name: 📦 Mover para LIMBO
    runs-on: ubuntu-latest
    needs: inicio
    steps:
      - name: Copiar para lib/limbo na branch LIMBO
        uses: actions/github-script@v7
        with:
          script: |
            const nome = '${{ needs.inicio.outputs.artefato }}';
            const { data: original } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: `Tutor-Demoníaco/rituais/${nome}.dart`,
              ref: 'Tutor-Demoníaco'
            });
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: `lib/limbo/${nome}.dart`,
              message: `🔮 Artefato ${nome} movido para LIMBO`,
              content: original.content,
              branch: 'LIMBO'
            });

  testar_limbo:
    name: 🧪 Testar LIMBO
    runs-on: ubuntu-latest
    needs: mover_limbo
    steps:
      - name: Simular teste (sempre aprova)
        run: echo "✅ Artefato em LIMBO aprovado"

  listar_dimensoes:
    name: 🌌 Listar dimensões
    runs-on: ubuntu-latest
    needs: testar_limbo
    outputs:
      instrumentos: ${{ steps.list.outputs.instrumentos }}
      grimorio: ${{ steps.list.outputs.grimorio }}
      extraplanares: ${{ steps.list.outputs.extraplanares }}
    steps:
      - id: list
        uses: actions/github-script@v7
        with:
          script: |
            async function listDim(path) {
              try {
                const { data } = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path,
                  ref: 'main'
                });
                return Array.isArray(data) ? data.filter(f => f.name.endsWith('.dart')).map(f => f.name.replace('.dart','')) : [];
              } catch {
                return [];
              }
            }
            core.setOutput('instrumentos', JSON.stringify(await listDim('Instrumentos-Magicos/instrumentos')));
            core.setOutput('grimorio', JSON.stringify(await listDim('GRIMORIO/rituais')));
            core.setOutput('extraplanares', JSON.stringify(await listDim('ExtraPlanares/extraplanar')));

  instrumentos:
    name: 🎶 Instrumentos-Mágicos
    runs-on: ubuntu-latest
    needs: listar_dimensoes
    if: fromJson(needs.listar_dimensoes.outputs.instrumentos)[0]
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.listar_dimensoes.outputs.instrumentos) }}
    steps:
      - run: echo "🎵 Artefato ${{ matrix.artefato }} pronto!"

  grimorio:
    name: 📖 GRIMORIO
    runs-on: ubuntu-latest
    needs: listar_dimensoes
    if: fromJson(needs.listar_dimensoes.outputs.grimorio)[0]
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.listar_dimensoes.outputs.grimorio) }}
    steps:
      - run: echo "📜 Artefato ${{ matrix.artefato }} pronto!"

  extraplanares:
    name: 🌠 ExtraPlanares
    runs-on: ubuntu-latest
    needs: listar_dimensoes
    if: fromJson(needs.listar_dimensoes.outputs.extraplanares)[0]
    strategy:
      fail-fast: false
      matrix:
        artefato: ${{ fromJson(needs.listar_dimensoes.outputs.extraplanares) }}
    steps:
      - run: echo "🌌 Artefato ${{ matrix.artefato }} pronto!"
