# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ 🧙 mago_supremo.yml - Ritual completo de invocação e observação           ┃
# ┃ 📍 Prompt colado → Olho executa → Fluxo observado até destino final       ┃
# ┃ 🔮 byThyrrel | GitHub Web | Estilo dimensional puro                       ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

name: Mago Supremo

on:
  workflow_dispatch:
    inputs:
      invocacao:
        description: "Cole o ritual com a tag {name}.txt"
        required: true
        type: string

jobs:
  consagrar:
    name: "🧿 Invocação Consagrada"
    runs-on: ubuntu-latest
    steps:
      - name: ✨ Executar o Olho de Agamoto
        run: |
          echo "${{ github.event.inputs.invocacao }}" > ritual.txt
          dart bin/olho_de_agamoto.dart ritual.txt

  observar:
    name: "👁️ Observando"
    runs-on: ubuntu-latest
    needs: consagrar
    outputs:
      falhos: ${{ steps.check.outputs.falhos }}
      instrumentos: ${{ steps.check.outputs.instrumentos }}
      grimorio: ${{ steps.check.outputs.grimorio }}
      extraplanares: ${{ steps.check.outputs.extraplanares }}
    steps:
      - id: check
        uses: actions/github-script@v7
        with:
          script: |
            async function listar(path, ref) {
              try {
                const { data } = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path,
                  ref
                });
                return Array.isArray(data) ? data.filter(f => f.name.endsWith('.dart')).map(f => f.name.replace('.dart','')) : [];
              } catch {
                return [];
              }
            }

            const falhos = await listar('lib/limbo', 'LIMBO');
            const instrumentos = await listar('Instrumentos-Magicos/instrumentos', 'main');
            const grimorio = await listar('GRIMORIO/rituais', 'main');
            const extraplanares = await listar('ExtraPlanares/extraplanar', 'main');

            core.setOutput('falhos', JSON.stringify(falhos.filter(n => n.includes('falha'))));
            core.setOutput('instrumentos', JSON.stringify(instrumentos));
            core.setOutput('grimorio', JSON.stringify(grimorio));
            core.setOutput('extraplanares', JSON.stringify(extraplanares));

  falha:
    name: "❌ Falha na Invocação"
    runs-on: ubuntu-latest
    needs: observar
    if: ${{ fromJson(needs.observar.outputs.falhos).length > 0 }}
    strategy:
      matrix:
        artefato: ${{ fromJson(needs.observar.outputs.falhos) }}
    steps:
      - run: echo "❌ Artefato '${{ matrix.artefato }}' falhou em LIMBO"

  instrumentos:
    name: "🎶 Instrumentos-Magicos"
    runs-on: ubuntu-latest
    needs: observar
    if: ${{ fromJson(needs.observar.outputs.instrumentos).length > 0 }}
    strategy:
      matrix:
        artefato: ${{ fromJson(needs.observar.outputs.instrumentos) }}
    steps:
      - name: Empoderar
        run: echo "🎵 Empoderando '${{ matrix.artefato }}'"

  grimorio:
    name: "📖 GRIMORIO"
    runs-on: ubuntu-latest
    needs: observar
    if: ${{ fromJson(needs.observar.outputs.grimorio).length > 0 }}
    strategy:
      matrix:
        artefato: ${{ fromJson(needs.observar.outputs.grimorio) }}
    steps:
      - name: Conjurar
        run: echo "📜 Conjurando '${{ matrix.artefato }}'"

  extraplanares:
    name: "🪐 ExtraPlanares"
    runs-on: ubuntu-latest
    needs: observar
    if: ${{ fromJson(needs.observar.outputs.extraplanares).length > 0 }}
    strategy:
      matrix:
        artefato: ${{ fromJson(needs.observar.outputs.extraplanares) }}
    steps:
      - name: Transcender
        run: echo "🌌 Transcendendo '${{ matrix.artefato }}'"
