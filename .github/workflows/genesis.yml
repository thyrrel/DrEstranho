# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ 🔮 genesis.yml - Workflow de build e testes para projeto Flutter           ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

name: Genesis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0' # ajuste se precisar da versão exata

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze project
        run: flutter analyze lib/tutor/

      - name: Run tests
        run: flutter test lib/tutor/

      - name: Build APK
        run: flutter build apk --target lib/tutor/main.dart

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

# Sugestões
# - 🛡️ Adicionar cache de dependências para acelerar builds
# - 🔤 Incluir validação de versão mínima do Dart/Flutter
# - 📦 Publicar APK como release automaticamente
# - 🧩 Criar job separado para testes em múltiplas plataformas
# - 🎨 Integrar com badge de status para README

# ✍️ byThyrrel  
# 💡 Workflow formatado com estilo técnico, seguro e elegante  
# 🧪 Ideal para conjuradores de código com foco em automação limpa e confiável
